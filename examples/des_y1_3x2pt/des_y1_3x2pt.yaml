parameters:
  Omega_k: 0.0
  Omega_b: 0.0485
  Omega_c: 0.2545
  w0: -1.0
  wa: 0.0
  h: 0.682
  sigma8: 0.801
  n_s: 0.971
  transfer_function: eisenstein_hu

  # IA model
  A0: 0.5
  eta_ia: 0.0

  # these parameters are fixed
  red_frac: 1.0
  alphag_ia: -1
  z_piv_ia: 0.62

  # shear errors
  {% for i in range(1, 5) %}
  src{{ i }}_mult_bias: 0.0
  {% endfor %}

  # linear bias for lenses
  {% for i, val in [(1, 1.4), (2, 1.6), (3, 1.6), (4, 1.9), (5, 2.0)] %}
  bias_lens{{ i }}: {{ val }}
  {% endfor %}

  # photoz shifts for the lensing sources
  {% for i, loc in [(1, -0.001), (2, -0.019), (3, 0.009), (4, -0.018)] %}
  src{{ i }}_delta_z: {{ loc }}
  {% endfor %}

  # photoz shifts for the lenses
  {% for i, loc in [(1, 0.001), (2, 0.002), (3, 0.001), (4, 0.003), (5, 0.0)] %}
  lens{{ i }}_delta_z: {{ loc }}
  {% endfor %}

emcee:
  parameters:
    - sigma8
    - Omega_c
    - A0
    - eta_ia
  {% for i in range(1, 5) %}
    - src{{ i }}_mult_bias
  {% endfor %}
  {% for i in range(1, 6) %}
    - bias_lens{{ i }}
  {% endfor %}
  {% for i in range(1, 5) %}
    - src{{ i }}_delta_z
  {% endfor %}
  {% for i in range(1, 6) %}
    - lens{{ i }}_delta_z
  {% endfor %}
  n_steps: 1000
  backend: mpi

priors:
  module: firecrown.priors

  Omega_b:
    kind: uniform
    loc: 0.03
    scale: 0.04  # 0.07 - 0.03
  Omega_c:
    kind: uniform
    loc: 0.03
    scale: 0.84  # 0.87 - 0.03
  w0:
    kind: uniform
    loc: -2.0
    scale: 1.67  # -0.33 - -2
  h:
    kind: uniform
    loc: 0.55
    scale: 0.36  # 0.91 - 0.55
  n_s:
    kind: uniform
    loc: 0.87
    scale: 0.2  # 1.07 - 0.87

  A0:
    kind: uniform
    loc: -5.0
    scale: 10  # 5.0 -- 5
  eta_ia:
    kind: uniform
    loc: -5.0
    scale: 10  # 5.0 -- 5

  {% for i in range(1, 6) %}
  bias_lens{{ i }}:
    kind: uniform
    loc: 0.8
    scale: 2.2  # 3.0 - 0.8
  {% endfor %}

  {% for i, loc, scale in [(1, 0.001, 0.008), (2, 0.002, 0.007), (3, 0.001, 0.007), (4, 0.003, 0.01), (5, 0.0, 0.01)] %}
  lens{{ i }}_delta_z:
    kind: norm
    loc: {{ loc }}
    scale: {{ scale }}
  {% endfor %}

  {% for i, loc, scale in [(1, -0.001, 0.016), (2, -0.019, 0.013), (3, 0.009, 0.011), (4, -0.018, 0.022)] %}
  src{{ i }}_delta_z:
    kind: norm
    loc: {{ loc }}
    scale: {{ scale }}
  {% endfor %}

  {% for i in range(1, 5) %}
  src{{ i }}_mult_bias:
    kind: norm
    loc: 0.012
    scale: 0.023
  {% endfor %}

two_point:
  module: firecrown.ccl.two_point
  sources:
    {% for i in range(1, 5) %}
    src{{ i }}:
      kind: WLSource
      dndz_data: des_data/dndz_src{{ i }}.csv
      ia_bias: A0
      red_frac: red_frac
      systematics:
        - delta_z_src{{ i }}
        - des_ia
        - shear_bias_src{{ i }}
    {% endfor %}

    {% for i in range(1, 6) %}
    lens{{ i }}:
      kind: NumberCountsSource
      dndz_data: des_data/dndz_lens{{ i }}.csv
      bias: bias_lens{{ i }}
      systematics:
        - delta_z_lens{{ i }}
    {% endfor %}

  systematics:
    {% for i in range(1, 6) %}
    delta_z_lens{{ i }}:
      kind: PhotoZShiftBias
      delta_z: lens{{ i }}_delta_z
    {% endfor %}

    {% for i in range(1, 5) %}
    delta_z_src{{ i }}:
      kind: PhotoZShiftBias
      delta_z: src{{ i }}_delta_z
    {% endfor %}

    des_ia:
      kind: LinearAlignmentSystematic
      alphaz: eta_ia
      alphag: alphag_ia
      z_piv: z_piv_ia
      Omega_b: Omega_b
      Omega_c: Omega_c

    {% for i in range(1, 5) %}
    shear_bias_src{{ i }}:
      kind: MultiplicativeShearBias
      m: src{{ i }}_mult_bias
    {% endfor %}

  statistics:
    {% for stat, ccl_stat in [('xip', 'l+'), ('xim', 'l-')] %}
    {% for i in range(1, 5) %}
    {% for j in range(i, 5) %}
    {{ stat }}_src{{ i }}_src{{ j }}:
      sources: ['src{{ i }}', 'src{{ j }}']
      kind: '{{ ccl_stat }}'
      data: des_data/{{ stat }}_src{{ i }}_src{{ j }}.csv
    {% endfor %}
    {% endfor %}
    {% endfor %}

    {% for j in range(1, 6) %}
    {% for i in range(1, 5) %}
    gammat_lens{{ j }}_src{{ i }}:
      sources: ['lens{{ j }}', 'src{{ i }}']
      kind: 'gl'
      data: des_data/gammat_lens{{ j }}_src{{ i }}.csv
    {% endfor %}
    {% endfor %}

    {% for i in range(1, 6) %}
    wtheta_lens{{ i }}_lens{{ i }}:
      sources: ['lens{{ i }}', 'lens{{ i }}']
      kind: 'gg'
      data: des_data/wtheta_lens{{ i }}_lens{{ i }}.csv
    {% endfor %}

  likelihood:
    kind: ConstGaussianLogLike
    data: des_data/cov.csv
    data_vector:
    {% for stat in ['xip', 'xim'] %}
    {% for i in range(1, 5) %}
    {% for j in range(i, 5) %}
      - {{ stat }}_src{{ i }}_src{{ j }}
    {% endfor %}
    {% endfor %}
    {% endfor %}

    {% for j in range(1, 6) %}
    {% for i in range(1, 5) %}
      - gammat_lens{{ j }}_src{{ i }}
    {% endfor %}
    {% endfor %}

    {% for i in range(1, 6) %}
      - wtheta_lens{{ i }}_lens{{ i }}
    {% endfor %}
