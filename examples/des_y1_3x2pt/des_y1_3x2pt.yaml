parameters:
  Omega_k: 0.0
  Omega_b: 0.0485
  Omega_c: 0.2545
  w0: -1.0
  wa: 0.0
  h: 0.682
  sigma8: 0.801
  n_s: 0.971
  transfer_function: eisenstein_hu

  # IA model
  A0: 0.5
  eta_ia: 0.0

  # these parameters are fixed
  alphag_ia: -1
  z_piv_ia: 0.62

  # shear errors
  {% for i in range(4) %}
  src{{ i }}_mult_bias: 0.0
  {% endfor %}

  # linear bias for lenses
  {% for val in [1.4, 1.6, 1.6, 1.9, 2.0] %}
  bias_lens{{ loop.index0 }}: {{ val }}
  {% endfor %}

  # photoz shifts for the lensing sources
  {% for loc in [-0.001, -0.019, 0.009, -0.018] %}
  src{{ loop.index0 }}_delta_z: {{ loc }}
  {% endfor %}

  # photoz shifts for the lenses
  {% for loc in [0.001, 0.002, 0.001, 0.003, 0.0] %}
  lens{{ loop.index0 }}_delta_z: {{ loc }}
  {% endfor %}

cosmosis:
  # the name of the sampler to use
  sampler: maxlike
  # the output chain file name
  parameters:
    Omega_c: [0.1, 0.2545,  0.6]
    sigma8: [0.6,  0.801,  1.0]
    src0_mult_bias: [-0.1, 0.0,  0.1]
  # whether to output more debugging information on failure
  # and regard python exceptions as errors (instead of just
  # using -inf likelihoods)
  debug: True
  # suppress output information
  quiet: False
  # whether to use MPI - must run under mpirun to do this
  mpi: False
  # parameters for individual samplers.
  # multinest - nested sampling
  multinest:
    # for info on these parameter see the multinest documentation.
    max_iterations: 50000
    live_points: 250
    tolerance: 0.1
    constant_efficiency: False
    live_points: 500
    efficiency: 0.3
    resume: True
  # for computing a grid of models - works for up to about three dimensions
  # but quickly becomes untenable above that.
  grid:
    # the number of grid points in each dimension.  Total number of models
    # is nsample_dimension ** ndim
    nsample_dimension: 25

priors:
  module: firecrown.priors

  Omega_b:
    kind: uniform
    loc: 0.03
    scale: 0.04  # 0.07 - 0.03
  Omega_c:
    kind: uniform
    loc: 0.03
    scale: 0.84  # 0.87 - 0.03
  w0:
    kind: uniform
    loc: -2.0
    scale: 1.67  # -0.33 - -2
  h:
    kind: uniform
    loc: 0.55
    scale: 0.36  # 0.91 - 0.55
  n_s:
    kind: uniform
    loc: 0.87
    scale: 0.2  # 1.07 - 0.87
  A0:
    kind: uniform
    loc: -5.0
    scale: 10  # 5.0 -- 5
  eta_ia:
    kind: uniform
    loc: -5.0
    scale: 10  # 5.0 -- 5

  {% for i in range(5) %}
  bias_lens{{ i }}:
    kind: uniform
    loc: 0.8
    scale: 2.2  # 3.0 - 0.8
  {% endfor %}

  {% for loc, scale in [(0.001, 0.008), (0.002, 0.007), (0.001, 0.007), (0.003, 0.01), (0.0, 0.01)] %}
  lens{{ loop.index0 }}_delta_z:
    kind: norm
    loc: {{ loc }}
    scale: {{ scale }}
  {% endfor %}

  {% for loc, scale in [(-0.001, 0.016), (-0.019, 0.013), (0.009, 0.011), (-0.018, 0.022)] %}
  src{{ loop.index0 }}_delta_z:
    kind: norm
    loc: {{ loc }}
    scale: {{ scale }}
  {% endfor %}

  {% for i in range(4) %}
  src{{ i }}_mult_bias:
    kind: norm
    loc: 0.012
    scale: 0.023
  {% endfor %}

two_point:
  module: firecrown.ccl.two_point
  sacc_data: des_y1_3x2pt_sacc_data.fits
  sources:
    {% for i in range(4) %}
    src{{ i }}:
      kind: WLSource
      sacc_tracer: src{{ i }}
      ia_bias: A0
      systematics:
        - delta_z_src{{ i }}
        - des_ia
        - shear_bias_src{{ i }}
    {% endfor %}

    {% for i in range(5) %}
    lens{{ i }}:
      kind: NumberCountsSource
      sacc_tracer: lens{{ i }}
      bias: bias_lens{{ i }}
      systematics:
        - delta_z_lens{{ i }}
    {% endfor %}

  systematics:
    {% for i in range(5) %}
    delta_z_lens{{ i }}:
      kind: PhotoZShiftBias
      delta_z: lens{{ i }}_delta_z
    {% endfor %}

    {% for i in range(4) %}
    delta_z_src{{ i }}:
      kind: PhotoZShiftBias
      delta_z: src{{ i }}_delta_z
    {% endfor %}

    des_ia:
      kind: LinearAlignmentSystematic
      alphaz: eta_ia
      alphag: alphag_ia
      z_piv: z_piv_ia

    {% for i in range(4) %}
    shear_bias_src{{ i }}:
      kind: MultiplicativeShearBias
      m: src{{ i }}_mult_bias
    {% endfor %}

  statistics:
    {% for stat, sacc_stat in [('xip', 'galaxy_shear_xi_plus'), ('xim', 'galaxy_shear_xi_minus')] %}
    {% for i in range(4) %}
    {% for j in range(i, 4) %}
    {{ stat }}_src{{ i }}_src{{ j }}:
      sources: ['src{{ i }}', 'src{{ j }}']
      sacc_data_type: '{{ sacc_stat }}'
    {% endfor %}
    {% endfor %}
    {% endfor %}

    {% for j in range(5) %}
    {% for i in range(4) %}
    gammat_lens{{ j }}_src{{ i }}:
      sources: ['lens{{ j }}', 'src{{ i }}']
      sacc_data_type: 'galaxy_shearDensity_xi_t'
    {% endfor %}
    {% endfor %}

    {% for i in range(5) %}
    wtheta_lens{{ i }}_lens{{ i }}:
      sources: ['lens{{ i }}', 'lens{{ i }}']
      sacc_data_type: 'galaxy_density_xi'
    {% endfor %}

  likelihood:
    kind: ConstGaussianLogLike
    data_vector:
    {% for stat in ['xip', 'xim'] %}
    {% for i in range(4) %}
    {% for j in range(i, 4) %}
      - {{ stat }}_src{{ i }}_src{{ j }}
    {% endfor %}
    {% endfor %}
    {% endfor %}

    {% for j in range(5) %}
    {% for i in range(4) %}
      - gammat_lens{{ j }}_src{{ i }}
    {% endfor %}
    {% endfor %}

    {% for i in range(5) %}
      - wtheta_lens{{ i }}_lens{{ i }}
    {% endfor %}
