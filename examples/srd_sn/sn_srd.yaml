parameters:
  Omega_k: 0.0
  Omega_b: 0.0485
  Omega_c: 0.2545
  w0: -1.0
  wa: 0.0
  h: 0.682
  sigma8: 0.801
  n_s: 0.971
  transfer_function: eisenstein_hu

cosmosis:
  # the name of the sampler to use
  sampler: maxlike
  # the output chain file name
  parameters:
    Omega_c: [0.1, 0.2545,  0.6]
    h: [0.6,  0.7,  0.8]
    M: [-20.1, -19.3,  -18.0]
  # whether to output more debugging information on failure
  # and regard python exceptions as errors (instead of just
  # using -inf likelihoods)
  debug: True
  # suppress output information
  quiet: False
  # whether to use MPI - must run under mpirun to do this
  mpi: False
  # parameters for individual samplers.
  # multinest - nested sampling
  multinest:
    # for info on these parameter see the multinest documentation.
    max_iterations: 50000
    live_points: 250
    tolerance: 0.1
    constant_efficiency: False
    live_points: 500
    efficiency: 0.3
    resume: True
  # for computing a grid of models - works for up to about three dimensions
  # but quickly becomes untenable above that.
  grid:
    # the number of grid points in each dimension.  Total number of models
    # is nsample_dimension ** ndim
    nsample_dimension: 25

priors:
  module: firecrown.priors

  Omega_b:
    kind: uniform
    loc: 0.03
    scale: 0.04  # 0.07 - 0.03
  Omega_c:
    kind: uniform
    loc: 0.03
    scale: 0.84  # 0.87 - 0.03
  w0:
    kind: uniform
    loc: -2.0
    scale: 1.67  # -0.33 - -2
  h:
    kind: uniform
    loc: 0.55
    scale: 0.36  # 0.91 - 0.55
  n_s:
    kind: uniform
    loc: 0.87
    scale: 0.2  # 1.07 - 0.87


sn_gauss:
  module: firecrown.ccl.two_point
  sacc_data: srd-y1-converted.sacc
  sources:
    {% for i in range(40) %}
    src{{ i }}:
      kind: misc
      sacc_tracer: src{{ i }}
    {% endfor %}

    {% for i in range(5) %}
    lens{{ i }}:
      kind: NumberCountsSource
      sacc_tracer: lens{{ i }}
      bias: bias_lens{{ i }}
      systematics:
        - delta_z_lens{{ i }}
    {% endfor %}

  statistics:
    {% for stat, sacc_stat in [('mu', 'distance')] %}
    {% for i in range(40) %}
    {{ stat }}_src{{ i }}:
      sources: ['src{{ i }}']
      sacc_data_type: '{{ sacc_stat }}'
    {% endfor %}
    {% endfor %}

  likelihood:
    kind: ConstGaussianLogLike
    data_vector:
    {% for stat in ['mu'] %}
    {% for i in range(40) %}
      - {{ stat }}_src{{ i }}
    {% endfor %}
    {% endfor %}
