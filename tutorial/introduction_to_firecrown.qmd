---
title: An Introduction to Firecrown
subtitle: "Version 1.9.0a0"
authors:
  - Marc Paterno
  - Sandro Vitenti
format:
  revealjs:
    footer: "An Introduction to Firecrown | Paterno and Vitenti"
    highlight-style: arrow
    include-after-body: clean_title_slide.html.frag
    height: 1080
    width: 1920
    margin: 0.05
    max-scale: 4.0
    min-scale: 0.05
    navigation-mode: linear
    slide-number: true
    theme: [serif, custom.scss]
    title-slide-attributes:
      data-background-color: black
      data-background-image: logo-dark-mode.png
      data-background-size: 40%
      data-background-position: right bottom
---

# What is Firecrown?

## Introducing Firecrown

-   Firecrown is the DESC *framework* for implementing likelihoods.
    - Provides connections with DESC tools (e.g. [CCL](https://github.com/LSSTDESC/CCL), [SACC](https://github.com/LSSTDESC/SACC)).
    - It is used by other DESC tools (e.g. [Augur](https://github.com/LSSTDESC/Augur)).
-   It can be used as a *standalone library* to calculate a likelihood.
-   It can be used with any of the supported *MCMC sampling frameworks* for inference. Currently supported sampling frameworks are:
    -   [Cobaya](https://github.com/CobayaSampler/cobaya)
    -   [CosmoSIS](https://github.com/joezuntz/cosmosis)
    -   [NumCosmo](https://github.com/NumCosmo/NumCosmo)

## Basic Firecrown concepts

-   Cosmology
-   Modeling tools
-   Likelihoods
    - Currently released likelihoods are all Gaussian-family
-   Statistics (for Gaussian-family likelihoods; calculate predicted means and store observations)
-   Sources (provide calculations of distributions of observable quantities related to mass distributions in the universe; for two-point statistics)
-   Systematics (alter calculations of predicted means)

## High-level Firecrown concepts

-   Cosmology (`pyccl.Cosmology`): represents a parameterized model.
-   Modeling tools (`firecrown.modeling_tools.ModelingTools`): associates a set of theoretical models for physical effects with a cosmology.
    -   Specific physical effects will get added as they are invented.
    -   Each is usable by different parts of the same likelihood; the cosmology is the most obvious example.
-   Likelihoods: calculates the probability of observing some given (presumably DESC) *data*, based on a certain set of parameters used in predictions of that data.
    -   Reads data from a SACC object: `read(sacc: sacc.Sacc) -> None`
    -   `calculate_loglike(tools: ModelingTools) -> float`
    -   Currently, only `GaussFamily` is implemented.

## Building blocks for `GaussFamily` likelihoods

-   Statistics: provide access to observations (a *data vector*) and calculate predictions (a *theory vector*) based on a set of parameters (a *cosmology*).
    -   `get_data_vector() -> DataVector`
    -   `compute_theory_vector(tools: ModelingTools) -> TheoryVector`
    -   May contain *systematics*.
-   Two point statistics: represented by class `TwoPoint`
    -   Contains two `Source`s and calculates the correlation between them.
    -   Use the same `Source` twice for auto-correlation.

## Building blocks for `TwoPoint` statistics

-   Sources: associated with one or more `Tracer`s
    -   `Tracer`: encapulates a `pyccl.Tracer` with optional metainformation of how to calculate it.
        [Caution]{.alert}: this code currently contains some features that are nowhere used.
	We are working on simplification of this code.
    -   Defines a `dataclass` that is used by the source to create the `pyccl.Tracer` object.
-   Systematics are associated with a type of source:
    -    `apply(self, tools: ModelingTools, tracer_args: T) -> T`
    -    The type `T` is a the `dataclass` mentioned above.
-   [Caution]{.alert}: These abstractions are currently under review.

## Development workflow

::: columns
::: {.column width="50%"}
In a factory function:

-   Define source systematics
-   Create `Source` objects
-   Create `Statistics` objects
-   Create the `Likelihood` and `ModelingTools` objects
-   Load SACC data into the `Likelihood` object
-   Return the `Likelihood` and `ModelingTools`
:::

::: {.column width="50%"}
Optionally, add a demo program:

-   Use your factory function to create a likelihood and toolset
-   Create a `pyccl.Cosmology`
-   Update the likelihood and toolset using the cosmology
-   Evaluate your likelihood using the toolset
:::
:::

## Examples in the repository

-   Simplified DES Y1 cosmic shear
    -   Only for CosmoSIS
-   DES Y1 3x2pt
    -   For Cobaya, CosmoSIS and NumCosmo
    -   basic version
    -   enhanced version with perturbation theory systematics
-   SRD Supernova
    -   For CosmoSIS and NumCosmo
    -   NumCosmo version also demonstrates the calculation of the Fisher matrix

# Installation and setup

## Installation modes

Firecrown supports a few different installation modes.

-   *Developer use*: If you want to modify existing Firecrown code, or if you may produce new code and may produce a pull request to submit your code to Firecrown, use the developer installation.

-   *Non-developer use*: If you want to write your own likelihood class or create subclasses of classes already in Firecrown, but do not intend to submit code back to Firecrown, you can use the non-development installation.
    If you choose this installation and decide later that you do want to submit your code back to Firecrown you will need to copy the new code files you write into a developer-usage environment at a later date.

[Firecrown is under rapid development: most users are developers.]{.alert}

## Developer installation {#developer-installation}


-   The following commands will:
    1.  clone the Firecrown repository
    2.  create a *conda* environment    
    3.  build the CosmoSIS standard library for use with Firecrown
-   Installation only needs to be done once.


## Clone the Firecrown repository

Choose a directory in which to work.
In this directory, you will be cloning the Firecrown repository and later building some of the non-Firecrown code that is not installable through conda.
Note that this is *not* the directory in which the conda environment is created, nor is it the directory in which the CosmoSIS Standard Library (CSL) will be built.

```{.bash}
git clone https://github.com/LSSTDESC/firecrown.git    
```

## Installation of dependencies

These instructions will create a new conda environment containing all the packages used in development.
(Note you may need to scroll down in the listing of instructions.)

```{.bash}
# conda env update, when run as suggested, is able to create a new environment, as
# well as updating an existing environment.
conda env update -f firecrown/environment.yml
conda activate firecrown_developer
# We define two environment variables that will be defined whenever you activate
# the conda environment.
conda env config vars set CSL_DIR=${CONDA_PREFIX}/cosmosis-standard-library FIRECROWN_DIR=${PWD}/firecrown
# The command above does not immediately defined the environment variables.
# They are made available on every fresh activation of the environment.
# So we have to deactivate and then reactivate...
conda deactivate
conda activate firecrown_developer
# Now we can finish building the CosmoSIS Standard Library.
source ${CONDA_PREFIX}/bin/cosmosis-configure
# We want to put the CSL into the same directory as conda environment upon which it depends
cd ${CONDA_PREFIX}
cosmosis-build-standard-library
# Now change directory into the firecrown repository
cd ${FIRECROWN_DIR}
# And finally make an editable (developer) installation of firecrown into the conda environment
python -m pip install --no-deps --editable ${PWD}
```

## Setting your environment for development

Each time you want to do development in a new shell session you need to activate the conda environment.

When you activate the conda environment, you can use the environment variable you defined when creating the environment to find your Firecrown directory:

```{.bash}
conda activate firecrown_developer
cd ${FIRECROWN_DIR}
```

-   `CSL_DIR` is used in CosmoSIS *ini* files to allow CosmoSIS to be run from any directory.
-   `FIRECROWN_DIR` is used in examples.

## Code development hygiene

:::columns
:::{.column width="50%"}
-   The Continuous Integration (CI) system will enforce these.
-   We are using `black` to keep consistent formatting across all python source files.
    -   Note that this use of `black --check` does not actually change any file.
    -   If files other than those you edited are complained about by black, please file an issue.
-   We are using `flake8` to help verify PEP8 compliance.
-   We are using type hints and `mypy` to help catch type-related errors.
-   We are using `pylint` to enforce a variety of rules.
:::

:::{.column width="50%"}
-   We are using `pytest` to run our unit test suite.


```{.bash code-copy=true}
black --check firecrown/ examples/ tests/
flake8 firecrown examples tests
mypy -p firecrown -p examples -p tests
pylint firecrown
pylint --rcfile firecrown/models/pylintrc firecrown/models
pylint --rcfile pylintrc_for_tests tests
python -m pytest -v tests
```
:::
:::
