{{< include _definitions.qmd >}}

For the Gaussian family of likelihoods, we have the base class `GaussFamily`.
This is an abstract class that provides several features:

`GaussFamily` currently has two subclasses: `ConstGaussian` and `StudentT`.
`ConstGaussian` implements a multivariate Gaussian likelihood with a covariance matrix that is constant (meaning that the covariance matrix does not vary with the cosmology, nor with any sampled parameters of the models in the `ModelingTools`.)

For any `GaussFamily` likelihood, one must have one or more `Statistic`s.
`Statistic` is an abstract base class for `TwoPoint` and `Supernova`.
A `Statistic` provides access to observations (a *data vector*) and calculates predictions (a *theory vector*) based on a set of parameters (a *cosmology*).
A `Statistic` is responsible for reading its data from a `sacc.SACC` object.
A `Statistic` also has indices that are used to identify what blocks of covariance matrices in the `SACC` object will be read.
A given `SACC` object may contain information from observations in many bins, but only those indicated by the indices in a `Statistic` will be read.
`Statistic`s may also contain *systematics* that modify the theory vector it calculates.
All `GaussFamily` likelihoods have an implementation of the `read` method that reads data covariance information from the provided `sacc.SACC` object.
These likelihoods use the indices from all of its (possibly many) `Statistic`s to build the covariance matrix for the likelihood.

The class `firecrown.likelihood.two_point.TwoPoint` is a statistic that represents a two-point function.
A `TwoPoint` object has two `Source`s, each of which is associated with one or more tracer names.
To calculate an autocorrelation, use the same `Source` twice.
Each `Source`  will produce one or more [`pyccl.Tracer`s](https://ccl.readthedocs.io/en/latest/api/pyccl.tracers.html#pyccl.tracers.Tracer).[^tracer]

[^tracer]: From the CCL documentation:
    Tracers contain the information necessary to describe the contribution of a given sky observable to its cross-power spectrum with any other tracer. Tracers are composed of 4 main ingredients:
    A radial kernel: this expresses the support in redshift/distance over which this tracer extends.
    A transfer function: this is a function of wavenumber and scale factor that describes the connection between the tracer and the power spectrum on different scales and at different cosmic times.
    An ell-dependent prefactor: normally associated with angular derivatives of a given fundamental quantity.
    The order of the derivative of the Bessel functions with which they enter the computation of the angular power spectrum.

Sometimes a source may have several tracers because it reflects a combination of different effects for the same kind of measurement.

Currently, we have two implementations of `Source`: `NumberCounts` and `WeakLensing`.
The `NumberCounts` source represents a galaxy number count measurement in a given bin. 
Since they act as lenses, they are usually labeled as `lens` sources. 
The `WeakLensing` source represents a weak lensing measurement, they result from light emitted by the source galaxies that is lensed by the matter distribution in the Universe. 
They are usually labeled as `src` sources.

Systematics objects for Sources have a simple interface: for each source, there is a *data class*[^dataclass] that has all the necessary information to build the sources and tracers.
A source can have a list of systematics.
When the source is evaluated, the list of systematics is iterated over, and the `apply` method of each is called, in order, given the previous value of the source and yielding a new value.
If, for example, you have a source for weak lensing, and you want to move the distribution of $dN/dz$, to apply a bias, this can be done with a systematic.

Firecrown does not currently make a clear distinction between "systematics" that really are systematic effects, and others that are more like modeling choices.
As we discussed above, the `ModelingTools` object handles systematic effects that are related to modeling choices.
We should do the same for the `Source` objects.
Then, the systematic effects that are not related to modeling choices can be handled by the `Source` objects.
We are working on improving this.
