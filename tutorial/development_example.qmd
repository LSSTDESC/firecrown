---
title: "Developing a New Likelihood"
subtitle: "Version 1.6.1a0"
authors:
  - Marc Paterno
  - Sandro Vitenti
execute:
  eval: false
format:
  html:
    toc: true
    theme: [serif, custom.scss]
    code-overflow: wrap
reference-location: margin
citation-location: margin
---

## Prologue

For the purposes of this example, by "developing a new likelihood" we mean writing the code that uses existing software element in the Firecrown package to define a likelihood for some specific data, taking into account the set of physical effects of interest for the analysis that will use this likelihood.
Technically, in Firecrown, this means writing a new *likelihood factory function*.

## Development workflow
{{< include _development_workflow.qmd >}}

## Building Firecrown
{{< include _building_firecrown.qmd >}}

## Code development hygiene

OLD STUFF TO RE-EVALUATE

-   The Continuous Integration (CI) system will enforce these.

``` {{bash}}
# We are using black to keep consistent formatting across all python source files.
# Note that this use of 'black --check' does not actually change any file. If files other
# than those you edited are complained about by black, please file an issue.
black --check firecrown/ examples/ tests/

# We are using flake8 to help verify PEP8 compliance.
flake8 firecrown examples tests

# We are using type hints and mypy to help catch type-related errors.
mypy -p firecrown -p examples -p tests

# We are using pylint to enforce a variety of rules.
pylint firecrown
pylint --rcfile pylintrc_for_tests tests
pylint --rcfile firecrown/models/pylintrc firecrown/models

# Run the unit test suite. Note that the coverage is incomplete.
python -m pytest -v tests
```

# Implementing a new [`ConstGaussian`]{.fragment} likelihood

## Overview

-   We will write a new *factory function* that will generate a likelihood that can be used with any of the supported samplers.
-   This likelihood will use some new data.
-   It will use some existing statistics and systematics.
-   The only new code will be our factory function, which assembles the specific instance of `ConstGaussian` that we want to use for our (toy) analysis.

## Organize your data

-   Firecrown expects data to be in [SACC](https://sacc.readthedocs.io) format.
-   Tracers: these are what you have observed
-   Covariance: correlations between observations

## Select your statistics

-   How do you predict what you expect to observe, given a cosmology?
-   What are your nuisance parameters?
  -   Encapsulate these as statistics
  -   Are they fixed values, or are you sampling over them?

## Write tests as you go along

-   You are more likely to write easy-to-use code if you actually use it as you write.
-   You are more likely to write code that achieves your purposes if you know what your purpose is as you write.
-   Writing tests as you design your code achieves both of these goals.

## Write your factory function

-   Structuring your factory function well helps make it easier for you, and others, to understand what you have written.

```{{python}}
from os.path 
import firecrown.likelihood.gauss_family.statistic.supernova as sn
from firecrown.likelihood.gauss_family.gaussian import ConstGaussian
import sacc

SACC_FILENAME =
    os.path.expandvars("${FIRECROWN_DIR}/examples/srd_sn/srd-y1-converted.sacc")

def build_likelihood(_):
    snia_stats = sn.Supernova(sacc_tracer="sn_ddf_sample")
    likelihood = ConstGaussian(statistics=[snia_stats])
    sacc_data = sacc.Sacc.load_fits(SACC_FILENAME)
    likelihood.read(sacc_data)
    # This simple likelihood has no associated ModelingTools
    return likelihood, None
```

NEW STUFF MAYBE REPLACING THE OLD

{{< include _code_development_hygiene.qmd >}}
