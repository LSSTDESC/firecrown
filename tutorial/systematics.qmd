---
title: "Handling Systematic Uncertainties"
format: html
---

{{< include _functions.qmd >}}

## Introduction 

In this tutorial we describe the handling of systematic uncertainties in Firecrown.
The class `SourceSystemtaic`[^1] is the base class for all source systematics.
A systematic represents a source of uncertainty in some measurement associated with a source.
One concreate example is `PhotoZShift`[^2], which encapsulate a shift in the center of redshift bins for measurements based on photometric measurement of the redshift.

[^1]: `firecrown.likelihood.source.SourceSystematic` is the full name of this class.

[^2]: There are actually two classes named `PhotoZShift`: one is `firecrown.likelihood.weak_lensing.PhotoZShift`; the other is `firecrown.likelihood.number_counts.PhotoZShift`.
      They are both derived from the `firecrown.likelihood.source.SourceSystematic` base class.

Derived from `SourceSystematic`, and defined in the same module, is the class `SourceGalaxySystematic`.
This class includes the `apply` method which is used to apply the systematic to a source galaxy tracer argument.
It also introduces a restriction that subclasses of `SourceGalaxySystematic` can only be applied to source galaxy tracers.
This is done using the Python type systems support of *generics*. [^3]
This restriction will be enforced by the `mypy` type checker.
The final abstract parts of the class hierarchy are two subclasses of `SourceGalaxySystematic`: `WeakLensingSystematic` and `NumberCountsSystematic`.
These classes are used to apply systematics to weak lensing and number counts predictions, respectively.
The various concrete systematics classes (such as the two `PhotoZShift` classes noted above) directly inherit from one of these two classes.

[^3]: You can read about generics in the [online Python documentation](https://docs.python.org/3/library/typing.html#generics).

## Creating Systematics Objects: Systematics Factories

## Applying Sysetmatics

## Writing a New Systematic
