---
title: "Using Firecrown to Generate Redshift Distributions"
subtitle: "Version 1.8.0a0"
author:
  - Marc Paterno
  - Sandro Vitenti
format:
  html:
    toc: true
    theme: [serif, custom.scss]
    code-overflow: wrap
    code-fold: false
reference-location: margin
citation-location: margin
jupyter: python3
---

::: {.hidden}
```{python}
def doc_theme():
    return theme_minimal() + theme(
        panel_grid_minor=element_line(color="gray", linetype="--")
    )
```
:::

## Purpose of this document

Firecrown provides facilities for creating distributions for galaxies
$$
P(z|B_i, \theta) \equiv \frac{\mathrm{d}n}{\mathrm{d}z}(z;B_i, \theta),
$${#eq-Pi}
where $B_i$ is the $i$-th bin of the photometric redshifts, and $\theta$ is a set of parameters that describe the model. 

In Firecrown, this distribution is stored as a `InferredGalaxyZDist` dataclass in `firecrown.metadata`, which contains the redshifts, the corresponding probabilities and the data-type of the measurements. Firecrown also provides objects that generate this distributions given a chosen model. In `firecrown.generators`, we have the `ZDistLSSTSRD` class, which generates the redshift distribution according to the LSST Science Requirements Document (SRD). 

## LSST SRD Distribution

In the LSST SRD, the redshift distribution is described by a set of parameters $\theta = (\alpha,\,\beta,\,z_0)$, where the redshift distribution is given by
$$
P(z|\theta) = f(z;\alpha,\,\beta,\,z_0) = \frac{\alpha}{z_0\Gamma[(1+\beta)/\alpha]}\left(\frac{z}{z_0}\right)^\beta\exp\left[\left(\frac{z}{z_0}\right)^\alpha\right],
$${#eq-fz}
To obtain the distribution in each photometric redshift bin, we need to convolve this with a model for the photometric redshift errors, namely
$$
P(z_\mathrm{p}|z,\sigma_z) = \frac{1}{N(z)\sqrt{2\pi}\sigma_z(1+z)}\exp\left[-\frac{1}{2}\frac{(z-z_p)^2}{\sigma_z^2(1+z)^2}\right],
$${#eq-Pzp}
where 
$$
N(z) = \frac{1}{2}\mathrm{erfc}\left[-\frac{z}{\sqrt{2}\sigma_z(1+z)}\right].
$$
The redshift distribution (@eq-Pi) is then given by
$$
\begin{align}
P(z|B_i, \theta) &= \int_{z_{p,i}^\mathrm{low}}^{z_{p,i}^\mathrm{up}} \!\!\!\mathrm{d}z_p\,P(z_p|z,\sigma_z)P(z|\theta), \\
&= \int_{z_{p,i}^\mathrm{low}}^{z_{p,i}^\mathrm{up}} \!\!\!\mathrm{d}z_p\,\frac{1}{\sqrt{2\pi}\sigma_z(1+z)}\exp\left[-\frac{1}{2}\frac{(z-z_p)^2}{\sigma_z^2(1+z)^2}\right]f(z;\alpha,\,\beta,\,z_0).
\end{align}
$${#eq-lsst-srd}
where $B_i = \left(z_{p,i}^\mathrm{low}, z_{p,i}^\mathrm{up}, \sigma_z\right)$ provides the photometric redshift bin limits and the photometric redshift error in the form $\sigma_z(1+z)$.

The object `ZDistLSSTSRD` in Firecrown generates the redshift distribution according to the LSST SRD. The following code block demonstrates how to use this object to generate the redshift distribution for a given set of parameters $\theta$.

Below we calculate @eq-fz for year 1 and year 10 parameters from LSST SRD.
Here we are choosing $100$ points between $0$ and $3$ to evaluate the function $f(z)$.
```{python}
import numpy as np
import firecrown
from firecrown.generators.inferred_galaxy_zdist import ZDistLSSTSRD

# These are the values of z at which we will evalute f(z)
z = np.linspace(0, 3.0, 100)

# We want to evaluate f(z) for both Y1 and Y10.
zdist_y1 = ZDistLSSTSRD.year_1()
zdist_y10 = ZDistLSSTSRD.year_10()

# Now we can generate the values we want to plot.
# Note that Pz_y1 and Pz_y10 are both numpy arrays:
Pz_y1 = zdist_y1.distribution(z)
Pz_y10 = zdist_y10.distribution(z)
```

The generated data are plotted in @fig-fz

```{python}
# | label: fig-fz
# | fig-cap: $\textrm{d}N/\textrm{d}z$ for both Year 1 and Year 10, using the formulation from the SRD.
# | fig-cap-location: margin
# | code-fold: true
from plotnine import *  # bad form in programs, but seems OK for plotnine
import pandas as pd

# The data were not originally generated in a dataframe convenient for
# plotting, so our first task it to put them into such a form.
# First we create a dataframe with the raw data.
data = pd.DataFrame({"z": z, "Y1": Pz_y1, "Y10": Pz_y10})
# Then we 'melt' the data into a longer form, which is more conveient for
# making multiple plots on the same axes, or for making panel (faceted) plots.
long = pd.melt(data, id_vars=["z"], var_name="year", value_name="fz")

# Now we can generate the plot.
(
    ggplot(long, aes("z", "fz", color="year"))
    + geom_point()
    + labs(y="dN/dz")
    + doc_theme()
)
```

Next, using the same SRD prescriptions, we want to generate the `InferredGalaxyZDist` objects representing @eq-Pi for a specific binning, and using a specific resolution parameter $\sigma_z$. Here we show the first bin for the lens and source samples for both Year 1 and Year 10, the functions are evaluated at $100$ points between $0$ and $0.6$.

```{python}
import numpy as np
import firecrown
from firecrown.generators.inferred_galaxy_zdist import (
    ZDistLSSTSRD,
    InferredGalaxyZDist,
    Y1_LENS_BINS,
    Y10_LENS_BINS,
    Y1_SOURCE_BINS,
    Y10_SOURCE_BINS,
)
from firecrown.metadata.two_point import MeasuredType, GalaxyMeasuredType

# These are the values at which we will evaluate the distribution.
z = np.linspace(0.0, 0.6, 100)

# We use the same zdist_y1 and zdist_y10 that were created above.
# We create two GalaxyInferredZDist objects, one for Y1 and one for Y10.
Pz_lens0_y1 = zdist_y1.binned_distribution(
    zpl=Y1_LENS_BINS["edges"][0],
    zpu=Y1_LENS_BINS["edges"][1],
    sigma_z=Y1_LENS_BINS["sigma_z"],
    z=z,
    name="lens0_y1",
    measured_type=GalaxyMeasuredType.COUNTS,
)
Pz_source0_y1 = zdist_y1.binned_distribution(
    zpl=Y1_SOURCE_BINS["edges"][0],
    zpu=Y1_SOURCE_BINS["edges"][1],
    sigma_z=Y1_SOURCE_BINS["sigma_z"],
    z=z,
    name="source0_y1",
    measured_type=GalaxyMeasuredType.SHEAR_E,
)
Pz_lens0_y10 = zdist_y10.binned_distribution(
    zpl=Y10_LENS_BINS["edges"][0],
    zpu=Y10_LENS_BINS["edges"][1],
    sigma_z=Y10_LENS_BINS["sigma_z"],
    z=z,
    name="lens0_y10",
    measured_type=GalaxyMeasuredType.COUNTS,
)
Pz_source0_y10 = zdist_y10.binned_distribution(
    zpl=Y10_SOURCE_BINS["edges"][0],
    zpu=Y10_SOURCE_BINS["edges"][1],
    sigma_z=Y10_SOURCE_BINS["sigma_z"],
    z=z,
    name="source0_y10",
    measured_type=GalaxyMeasuredType.SHEAR_E,
)

assert isinstance(Pz_lens0_y1, InferredGalaxyZDist)
assert isinstance(Pz_lens0_y10, InferredGalaxyZDist)
assert isinstance(Pz_source0_y1, InferredGalaxyZDist)
assert isinstance(Pz_source0_y10, InferredGalaxyZDist)
```

The plot of the $\textrm{d}N/\textrm{d}z$ distributions in these `GalaxyInferredZDist` objects is shown in @fig-inferred-dist.

```{python}
# | label: fig-inferred-dist
# | fig-cap: $\textrm{d}N/\textrm{d}z$ for both Year 1 and Year 10, using the formulation from the SRD, with the binning and resolution specified above.
# | fig-cap-location: margin
# | code-fold: true
# We have already imported plotnine, so we don't need to do that again.
# This time we generate the dataframe using a different technique.
d_lens0_y1 = pd.DataFrame(
    {
        "z": Pz_lens0_y1.z,
        "dndz": Pz_lens0_y1.dndz,
        "year": "Y1",
        "bin_name": Pz_lens0_y1.bin_name,
    }
)
d_source0_y1 = pd.DataFrame(
    {
        "z": Pz_source0_y1.z,
        "dndz": Pz_source0_y1.dndz,
        "year": "Y1",
        "bin_name": Pz_source0_y1.bin_name,
    }
)
d_lens0_y10 = pd.DataFrame(
    {
        "z": Pz_lens0_y10.z,
        "dndz": Pz_lens0_y10.dndz,
        "year": "Y10",
        "bin_name": Pz_lens0_y10.bin_name,
    }
)
d_source0_y10 = pd.DataFrame(
    {
        "z": Pz_source0_y10.z,
        "dndz": Pz_source0_y10.dndz,
        "year": "Y10",
        "bin_name": Pz_source0_y10.bin_name,
    }
)
data = pd.concat([d_lens0_y1, d_source0_y1, d_lens0_y10, d_source0_y10])

(
    ggplot(data, aes("z", "dndz", color="bin_name"))
    + geom_point()
    + labs(y="$\mathrm{d}N/\mathrm{d}z$")
    + doc_theme()
    + facet_wrap("~ year", nrow=2)
)
```

## Generating the redshift distribution for all bins at once

The `ZDistLSSTSRD` object can also be used to generate the redshift distribution for all bins at once. The following code block demonstrates how to generate the redshift distribution for all bins at once. Moreover, we also use NumCosmo's `autoknots` to determine the number of knots to use in the spline interpolation, the knots are assigned such that the interpolation error is less than $10^{-5}$.

```{python}

from itertools import pairwise

# We use the same zdist_y1 and zdist_y10 that were created above.
# We create two GalaxyInferredZDist objects, one for Y1 and one for Y10.
z = np.linspace(0.0, 1.6, 1000)
all_y1_bins = [
    zdist_y1.binned_distribution(
        zpl=zpl,
        zpu=zpu,
        sigma_z=Y1_LENS_BINS["sigma_z"],
        z=z,
        name=f"lens_{zpl:.1f}_{zpu:.1f}_y1",
        measured_type=GalaxyMeasuredType.COUNTS,
        use_autoknot=True,
        autoknots_reltol=1.0e-5,
    )
    for zpl, zpu in pairwise(Y1_LENS_BINS["edges"])
] + [
    zdist_y1.binned_distribution(
        zpl=zpl,
        zpu=zpu,
        sigma_z=Y1_SOURCE_BINS["sigma_z"],
        z=z,
        name=f"source_{zpl:.1f}_{zpu:.1f}_y1",
        measured_type=GalaxyMeasuredType.SHEAR_E,
        use_autoknot=True,
        autoknots_reltol=1.0e-5,
    )
    for zpl, zpu in pairwise(Y1_SOURCE_BINS["edges"])
]
```

The plot of the $\textrm{d}N/\textrm{d}z$ distributions in these `GalaxyInferredZDist` objects is shown in @fig-inferred-dist-all.

```{python}
# | label: fig-inferred-dist-all
# | fig-cap: $\textrm{d}N/\textrm{d}z$ for all bins for LSST Year 1 using the formulation from the SRD.
# | fig-cap-location: margin
# | code-fold: true
# We have already imported plotnine, so we don't need to do that again.
# This time we generate the dataframe using a different technique.
d_y1 = pd.concat(
    [
        pd.DataFrame(
            {
                "z": Pz.z,
                "dndz": Pz.dndz,
                "bin": Pz.bin_name,
                "measured_type": Pz.measured_type,
                "legend": f"{Pz.bin_name}, {len(Pz.z)}",
            }
        )
        for Pz in all_y1_bins
    ]
)

(
    ggplot(d_y1, aes("z", "dndz", color="legend"))
    + geom_point()
    + labs(y="dN/dz")
    + facet_wrap("~ measured_type", nrow=2)
    + doc_theme()
)
```
